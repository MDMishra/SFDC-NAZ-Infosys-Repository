<!-- 
// 
// (c) 2016 Appirio, Inc.
//
// Implement GetNearByAccounts Asset for SF1
//
// 07 June 2016     Gagandeep Kaur     Original - T-508006 : HE_ClientSideGoogleLocationAPI VF Page
//
 -->

<apex:page Controller="HE_ClientSideGoogleLocationAPI" id="page" standardStylesheets="false" applyHtmlTag="false" applyBodyTag="false" showHeader="false" sidebar="false" docType="html-5.0">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> 
    <head>
    
        <apex:stylesheet value="{!URLFOR($Resource.slds,'slds/assets/styles/salesforce-lightning-design-system-vf.css')}" />
        <style>
        .similar {
              background-color: white;
              color: #16325c;
              border: 1px solid #d8dde6;
              border-radius: 4px;
              width: 100%;
              transition: border 0.1s linear, background-color 0.1s linear;
              padding: 0 16px 0 12px;
              line-height: 34px;
              min-height: calc(34px + 2px);
        }
        </style>
    </head>
    <script type='text/javascript' src='/canvas/sdk/js/publisher.js'> </script> 
<!--     <script src="https://maps.googleapis.com/maps/api/js?libraries=places,geometry&callback=initialize"></script> -->
<!--    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script> -->
    <script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false"></script> 
    <script type="text/javascript">
        var markersArray = [];
        var userDet = '{!$User.FirstName} {!$User.LastName}:{!$User.Id}' ;
        var greenMarker = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png' ;
        var infoWindow ;
        // initialize the map and shows current position of logged in user
        function initialize() {
            var map, lat, lon, marker;
            var selectedDist = 'page:form:pb:pbs:sListsItems:dist' ;
            var selectedUnit = 'page:form:pb:pbs:sListsItems:unit' ;
            if(navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position){
                    lat = position.coords.latitude;
                    lon = position.coords.longitude;
                    console.log('lat = '+lat.toString()+' - lon = '+lon.toString());
                    map=getNewMap(lat,lon);
                    marker=getNewMarker(userDet,lat,lon,map);
                    marker.setIcon(greenMarker);
                    getNearbyAccounts(lat,lon,map,selectedDist,selectedUnit); // fetch near by accounts
                    getClickEvent(map,marker,selectedDist,selectedUnit);
                    getAddressFromLatLng(lat,lon); // fetch address from the latitude and longitude
                    createListOfAcc(lat,lon); // create list of accounts to display
                });
            } else{ // default location
                lat = 37.77493;
                lon = -122.419416;
                map=createMap(lat, lon);
            }
            
            
        }//END initialize();
        
        function getAddressFromLatLng(lat,lon) {
            var latlng = new google.maps.LatLng(lat, lon);
            var geocoder= new google.maps.Geocoder();
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    var street = getAddressValueFromJSON(results[0],'street_number');
                    var route = getAddressValueFromJSON(results[0],'route');
                    var locality = getAddressValueFromJSON(results[0],'locality');
                    var city = getAddressValueFromJSON(results[0],'administrative_area_level_2');
                    var state = getAddressValueFromJSON(results[0],'administrative_area_level_1');
                    var country = getAddressValueFromJSON(results[0],'country');
                    var zipcode = getAddressValueFromJSON(results[0],'postal_code');
                    
                    populateAddressFields(street,route,locality,city,state,country,zipcode);
                } else { 
                    alert('Geocoder failed due to: ' + status);
                }
            });
        }
        
        function getAddressValueFromJSON(resultJSON,addressType) {
            var addressValue = '' ;
            for(var j = 0 ; j < resultJSON.address_components.length ; j++) {
                var addType = resultJSON.address_components[j].types ;
                var addVal = resultJSON.address_components[j].long_name ;
                if(addType.indexOf(addressType) > -1) {
                    addressValue = addVal ;
                }
            }
            return addressValue ;
        }
        
        function populateAddressFields(street,route,locality,city,state,country,zipcode) {
            var strtVal = [] ;
            if(street != '') {
                strtVal.push(street);
            }
            if(route != '') {
                strtVal.push(route);
            }
            if(locality != '') {
                strtVal.push(locality);
            }
            
            document.getElementById("street").value = strtVal.join(',');
            document.getElementById("city").value = city;
            document.getElementById("state").value = state;
            document.getElementById("postalcode").value = zipcode;
            document.getElementById("country").value = country;
        
        }
        
        function locateAddress(street,city,state,postalcode,country,dist,unit) {
            var address = validateAddress(street,city,state,postalcode,country);
            if(address == '') {
                alert("Please fill in the address fields");
                return ;
            }
            var geocoder= new google.maps.Geocoder();
            var map, marker, lat,lon ;
            geocoder.geocode( { address: address}, function(results, status) {
                if (status == google.maps.GeocoderStatus.OK && results.length) {
                  if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
                      lat = results[0].geometry.location.lat() ;
                      lon = results[0].geometry.location.lng() ;
                    //create map
                    map = getNewMap(lat,lon);
                    //center map
                    map.setCenter(results[0].geometry.location);
                    //create marker
                    marker = getNewMarker(userDet,lat,lon,map);
                    marker.setIcon(greenMarker);
                    getNearbyAccounts(lat,lon,map,dist,unit);
                    getClickEvent(map,marker,dist,unit);
                    createListOfAcc(lat,lon);
                  }
            
                } 
              });
        }
        function validateAddress(street1,city1,state1,postalcode1,country1) {
            var street = document.getElementById(street1).value;
            var city = document.getElementById(city1).value;
            var state = document.getElementById(state1).value;
            var postalcode = document.getElementById(postalcode1).value;
            var country = document.getElementById(country1).value;
            
            if(street == "" && city == "" && state == "" && postalcode == "" && country == "") {
                return '' ;
            }
            return street+","+city+","+state+","+postalcode+","+country ;
        }
        
        function getClickEvent(map,marker,dist,unit) {
            google.maps.event.addListener(map, 'click', function(event) {
                    marker.setMap(null);
                marker = getNewMarker(userDet,event.latLng.lat(),event.latLng.lng(),map);
                marker.setIcon(greenMarker);
                getNearbyAccounts(event.latLng.lat(),event.latLng.lng(),map,dist,unit);
                getAddressFromLatLng(event.latLng.lat(),event.latLng.lng());
                createListOfAcc(event.latLng.lat(),event.latLng.lng());
              });
        }
        
        function getNewMap(lat,lon) { 
            var mapOptions = {
              center: new google.maps.LatLng(lat, lon),
              zoom: 17,
              mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            return new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
        }//END getNewMap(lat,lon)

        // Parse account details to show the proper address on Information window of marker
        function getNewMarker(name,lat,lng,map) {
            var num = 1;
            var myLatlng = new google.maps.LatLng(lat, lng);
            var accDetails = [] ;
            if(name.indexOf(":")>-1) {
                for(var i = 0;i<name.split(":").length;i++) {
                    accDetails.push(name.split(":")[i]);
                }
                
            } else {
                accDetails.push(name);
            }
            
            var addressString = '<br>';
            if(accDetails.length >= 3 && accDetails[2] != '') {
                addressString += accDetails[2]+'<br>' ;
            } 
            if(accDetails.length >= 4 && accDetails[3] != '') {
                addressString += accDetails[3] ; 
            }
            if(accDetails.length >= 5 && accDetails[4] != '') {
                addressString += ', '+accDetails[4];
            } 
            if(accDetails.length >= 6 && accDetails[5] != '') {
                addressString += ' - '+accDetails[5] ;
            }
            if(accDetails.length >= 7 && accDetails[6] != '') {
                addressString += '<br>'+accDetails[6] ;
            }
            var phoneNo = '';
            if(accDetails.length >= 8 && accDetails[7] != '') {
                phoneNo = '<br>'+accDetails[7] ;
            }
            var contentString = '<div style="min-width:100px;min-height:20px;"> <b><a href="javascript:openAccount(\''+accDetails[1]+'\')" target="_blank">'+accDetails[0]+'</a></b>'+phoneNo+addressString+"</div>";
            var marker = new google.maps.Marker({
              position: myLatlng,
              map: map,
              title: accDetails[0],
            });
            
           
            
            google.maps.event.addListener(marker, 'click', function() {
                 if (infoWindow) infoWindow.close();
                 infoWindow = new google.maps.InfoWindow({
                    content: contentString
                });
                infoWindow.open(map, marker);
            });
            return marker;
        }//END getNewMarker(lat,lon,map)
        
        // get near by account and display all markers      
        function getNearbyAccounts(lat,lng,map,dist,unit) {
            var selectedDist =  document.getElementById("page:form:dist").value; //document.getElementById("dist").value
            //alert('selectedDist = ' + selectedDist);
            var selectedUnit = document.getElementById("page:form:unit").value; //document.getElementById(unit).value 
            //alert('selectedUnit = ' + selectedUnit);
            HE_ClientSideGoogleLocationAPI.getNearbyAccounts(lat, lng, selectedDist, selectedUnit, function (result, event) {
                if (event.status) {
                    clearOverlays();
                    for (i = 0; i < result.length; i++) {
                        var acctName = result[i].Name;
                        var acctId = result[i].Id ;
                        var BillingStreet = result[i].BillingStreet ;
                        var BillingCity = result[i].BillingCity ;
                        var BillingState = result[i].BillingState ;
                        var BillingPostalCode = result[i].BillingPostalCode ;
                        var BillingCountry = result[i].BillingCountry ;
                        var Phone = result[i].Phone;
                        var details = acctName+":"+acctId+":"+BillingStreet+":"+BillingCity+":"+BillingState+":"+ BillingPostalCode+":" + BillingCountry+":"+Phone ;
                        var marker1 = getNewMarker(details, result[i].BillingLatitude, result[i].BillingLongitude,map);
                        markersArray.push(marker1);
                    }
                }
            });
        }
        
        // Remove older markers
        function clearOverlays() {
          for (var i = 0; i < markersArray.length; i++ ) {
            markersArray[i].setMap(null);
          }
          markersArray.length = 0;
        }
        
        function openAccount(accountId) {
            if((typeof sforce != 'undefined') && (sforce != null)) {
                sforce.one.navigateToSObject(accountId,'detail');
            } else {
                window.open('/'+accountId);
            }
        }
        google.maps.event.addDomListener(window, 'load', initialize);
         
    </script>
    
    <div class="slds"> 
    <apex:form id="form">
    <apex:inputHidden id="ih"/>
        <apex:actionFunction name="createListOfAcc" action="{!fetchNearByAccounts}" rerender="pbs2">
            <apex:param name="latitude" assignTo="{!latitude}" value=""/>
            <apex:param name="longitude" assignTo="{!longitude}" value=""/>
        </apex:actionFunction>
        <div id="pb">
        <apex:outputPanel id="op1">
        <div id="pbs">
        
            <div >
                <apex:outputLabel value="Street" styleClass="slds-input"/>
                <input type="text" id="street" class="similar"/>
            </div>
            <div>
                <apex:outputLabel value="City" styleClass="slds-input"/>
                <input type="text" id="city" class="similar"/>
            </div>
            <div>
                <apex:outputLabel value="State" styleClass="slds-input"/>
                <input type="text" id="state" class="similar"/>
            </div>
            <div>
                <apex:outputLabel value="Postal Code" styleClass="slds-input"/>
                <input type="text" id="postalcode" class="similar"/>
            </div>
            <div>
                <apex:outputLabel value="Country" styleClass="slds-input"/>
                <input type="text" id="country" class="similar"/>
            </div>
            <div id="sListsItems">
                <apex:outputLabel value="with in radius"/>
                <apex:outputPanel id="sList">
                    <apex:selectList id="dist" multiselect="false" size="1" value="{!selectedDist}">
                        <apex:selectOptions value="{!DistanceOptions}" />
                    </apex:selectList>
                    <apex:selectList id="unit" multiselect="false" size="1" value="{!selectedDistUnit}" >
                        <apex:selectOptions value="{!DistUnitOptions}" />
                    </apex:selectList>
                </apex:outputPanel>
            </div>
            <br/>
            <apex:outputPanel >
            <div class="slds-button-group" > <button type="button" class="slds-button slds-button--neutral"  onClick="locateAddress('street','city','state','postalcode','country','page:form:pb:pbs:sListsItems:dist','page:form:pb:pbs:sListsItems:unit');return false;" > Locate Place </button>
            <button type="button" class="slds-button slds-button--neutral" onClick="populateAddressFields('','','','','','','');return false;"> Clear Fields </button>
            </div>
            </apex:outputPanel>
        </div>
        <hr/>
        <apex:outputPanel id="op" style="width:100%;">
        <div id="map-canvas" style="min-height: 600px ; width:100%;float:left;" ></div>
<!--        <div style="min-height: 600px ; width:30%;float:right;overflow:overflow"> -->
<!--                <apex:pageBlockSection id="pbs2" columns="1"> -->
<!--                    <apex:pageBlockTable value="{!accountWrapperList}" var="acc" > -->
<!--                        <apex:column headerValue="Account Name" style="width:70%" ><apex:commandLink value="{!acc.Account.Name}" onClick="openAccount('{!acc.Account.Id}');return false;"/></apex:column> -->
<!--                        <apex:column headerValue="Distance (in {!selectedDistUnit})" style="width:30%"> -->
<!--                            <apex:outputText value="{0, number, 0.000}"> -->
<!--                                <apex:param value="{!acc.distance}" /> -->
<!--                            </apex:outputText> -->
<!--                        </apex:column> -->
<!--                    </apex:pageBlockTable> -->
<!--                </apex:pageBlockSection> -->
<!--                </div> -->
        </apex:outputPanel>
        
        </apex:outputPanel>
        </div>
<!--        </apex:pageBlock> -->
    </apex:form>
    </div>
    </html>
</apex:page>